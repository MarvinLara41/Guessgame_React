{"version":3,"sources":["components/card/index.jsx","components/board/index.jsx","deck.js","serviceWorker.js","index.js","App.jsx"],"names":["Card","handleClick","id","type","flipped","height","width","solved","disabled","className","style","onClick","src","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shufflle","reduce","acc","push","Boolean","window","location","hostname","match","ReactDOM","render","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","useEffect","resizeBoard","intializeDeck","resizeListener","addEventListener","removeEventListener","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","setTimeout","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7ea34a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\nimport { type } from 'os';\r\n\r\n\r\n//gives access directly to the props\r\nexport default function Card ({ handleClick, id, type, flipped, height, width, solved, disabled}){\r\n    //destructor of the properties, gives access to these properties\r\n  \r\n  \r\n    return<div\r\n    className={`flip-container  ${flipped ? 'flipped' : ''}`}\r\n    style={{\r\n        width,height\r\n    }}\r\n    onClick={() => disabled ? null : handleClick(id)} //handleClick function contains the id of the card being flipped\r\n    >\r\n        <div className=\"flipper\">\r\n            <img \r\n            style={{\r\n                height, width\r\n            }}\r\n            className={flipped ? 'front' : 'back'}//class name of the object is dependent of wheather the card is flipped front or back\r\n            src={flipped || solved ? `/img/${type}.png` : '/img/back.png'}\r\n            />\r\n        </div>\r\n    </div>\r\n    \r\n}\r\nCard.propTypes={//determining the property type of each state\r\n    handleClick: PropTypes.func.isRequired,\r\n    id: PropTypes.number.isRequired, \r\n    flipped: PropTypes.bool.isRequired,\r\n    solved: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n    disabled: PropTypes.bool.isRequired\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '../card'\r\nimport './styles.css'\r\n\r\nexport default function Board ({\r\n    dimension,\r\n    cards,\r\n    flipped,\r\n    handleClick,\r\n    solved,\r\n    disabled,\r\n    //here we are destructiong the function with the functions we will be using in the this file\r\n})\r\n{\r\n    return (\r\n    <div className=\"board\">\r\n        {cards.map((card) => ( \r\n            <Card \r\n                key={card.id}\r\n                id={card.id}\r\n                type={card.type}\r\n                width={dimension / 4.5}\r\n                height={dimension / 4.5}\r\n                flipped= {flipped.includes(card.id)}\r\n                solved= {solved.includes(card.id)}\r\n                handleClick= {handleClick} //this changes the clicked state of the card\r\n                disabled={disabled || solved.includes(card.id)}\r\n                />\r\n            ))}\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n//create properties\r\n\r\nBoard.propTypes={\r\n    disabled: PropTypes.bool.isRequired,\r\n    dimension: PropTypes.number.isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n}","function shufflle(array){\r\n    //shuffle the deck of cards\r\n    const _array = array.slice(0)\r\n    for(let i=0; i <array.length- 1; i++){\r\n        let randomIndex = Math.floor(Math.random()* (i + 1))\r\n        let temp = _array[i]\r\n        _array[i] = _array[randomIndex]\r\n        _array[randomIndex] = temp\r\n    \r\n    }\r\n    return _array\r\n}\r\n\r\nexport default function initializeDeck(){\r\n    let id = 0\r\n    const cards = [ 'angela', ' dwight', 'jim', 'kelly', 'michael', 'pam' ].reduce((acc, type)=>{\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        return acc\r\n    }, [] )\r\n\r\n    return shufflle(cards)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState, useEffect} from 'react';\nimport Board from './components/board';\nimport './App.css';\nimport intializeDeck from './deck'\n\n\n\nexport default function App() {\n  const [cards, setCards] = useState([])\n\n\n\n  //in this const we are getting the flipped thats in the div, setFlipped is the name of the method that sets the state,\n  //useState default state is a default state\n  const [flipped, setFlipped] = useState([]) //the use state array will store ids\n  \n  const [dimension, setDimension] = useState(400)\n\n  const [solved, setSolved] = useState([])//board logic\n\n  const[disabled, setDisabled] = useState(false) //disables board when card is flipped\n\n  useEffect(()=>{\n    resizeBoard()\n    setCards(intializeDeck())\n  }, [])\n  \n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n\n    return()=> window.removeEventListener('resize', resizeListener)\n  })\n  \n  const handleClick = (id) => { \n    \n    setDisabled(true)\n    if (flipped.length===0){\n      setFlipped([id])\n      setDisabled(false)\n      \n    }else{\n      if (sameCardClicked (id))return\n      setFlipped([flipped[0], id])\n      if (isMatch(id)){\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      }else{\n        setTimeout(resetCards, 2000)\n      }\n    }\n    //id needs to be inside a array otherwise it will become a number. Number doesnt have method (includes)\n    \n  }\n\n\nconst resetCards = () => {\n  setFlipped([])\n  setDisabled(false)\n}\n\nconst sameCardClicked = (id) => flipped.includes(id)\n\nconst isMatch = (id) => {\n  const clickedCard = cards.find((card)=> card.id ===id)\n  const flippedCard = cards.find((card) => flipped[0] === card.id)\n\n  return flippedCard.type === clickedCard.type\n}\n\n  const resizeBoard = () =>{\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    ),\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Memory</h1>\n      <h2>Remember where the cards are!</h2>\n     <Board \n     dimension={dimension}\n      cards={cards}\n      flipped={flipped}\n      handleClick={handleClick}\n      disabled={disabled}\n      solved={solved}\n    />\n    </div>\n  );\n}\n\n\n"],"sourceRoot":""}